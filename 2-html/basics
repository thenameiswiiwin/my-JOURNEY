# HTML
  - HyperText Markup Language.
  - gives structure to the webpage which you can style using CSS and make interactive using JavaScript.
  - consists of a sereies of elements.
  - elements tell the browser how to display the content.
  - elements label pieces of content such as:
    > heading
    > paragraph
    > link

# INTRO

  <!DOCTYPE html>
    |- declaration defines that this document is an HTML5 document.
  <html>
    |- the root element of an HTML page.
  <head>
    |- element contains meta information about the HTML page.
  <title>
    |- elemenet specifies a title for the HTML page.
    |- shown in the browser title bar or the page tab.
  <body>
    |- element defines the documents body.
    |- a container for all the visible contents, such as headings, paragraphs, images, hyperlinks, tables, lists, etc.

# Element
  - defined by a start tag, some content, and an end tag. Everything from the start tag to the end tag.
# Nested Element
  - elements can be nested, elements can contain other elements.

# Basic Tags

  1. Headings
    |- <h1> to <h6>
  2. Paragraphs
    |- <p>
  3. Links
    |- <a href="">Link name</a>
  4. Images
    |- <img src="" alt="" width="" height="">

# Attributes
  - provide additional information about elements.
  - always specified in the start tag.
  - usually come in name/value pairs like: name="value"

  1. href
    - specifies the URL of the page the link goes to.
  2. src
    - specifies the path to the immage to be displayed.
  3. width and height
    - specifies the width and height of the image in pixels.
  4. alt
    - specifies an alternate text for an image, if the image for some reason cannot be displayed.
    - good for screen reader, or when pages does load, or error in the src attribute.

# Headings
  1. <h1> to <h6>
# Paragraphs
  1. <p>
  2. <pre> --> defines preformatted text
    - text inside <pre> element displayed in a fixed-width font, and it preserves both spaces and line breaks.

# Formatting
  1. <b> --> Bold
  2. <strong> --> Important text
  3. <i> --> Italic text
  4. <em> --> Emphasized text
  5. <mark> --> Marked text
  6. <small> --> Smaller text
  7. <del> --> Deleted text
  8. <ins> --> Inserted text
  9. <sub> --> Subscripted text
  10. <sup> --> Superscript text

# Quotation and Citation
  1. <blockquote> --> defines a section that is quoted from another source.
    - browser usually indent blockquotes elements.
  2. <q> --> defines a short quotation
    - browser normally insert quotation marks around the quotation.
  3. <abbr> --> abbreviations or acronym
    - making abbreviations can give useful information to browsers, translation systems and search-engine.
    - use the global title attribute to show the description for the abbreviation/acronym when you mouse over the element.
  4. <address> --> defines the contact information for the author/owner of a document or an article.
    - the address element usually renders in italic, and browsers will alwyas add a line break before and after the address element.
  5. <cite> --> defines the title of a creative work (book, poem, song, movie, painting, etc.)
    - a person name is not the title of a work
    - <p><cite>The Scream</cite> by Edvard Munch. Painted in 1893.</p>

# Links
  - HTML links are Hyperlinks.
  - <a href="url">link text</a>

  1. Target attribute
    - specifies where to open the linked document.
    - the target attribute can have one of the following values:
        |- _self --> default, open in the same window/tab
        |- _blank --> opens in a new window or tab
        |- _parent --> opens in the parent frame
        |- _top --> opens in the full body of the window
  2. Link Titles
    - specifies extra information about element. The information is most often shown as a tooltip text when the mouse moves over the element.
    - hover over link will give the title.
    - <a href="" title="Go to W3Schools HTML section"></a>

# Images
  - <img> tag requires 2 attributes:
    A. src - specifies the path to the image
    B. alt - specifies the alternate textfor the image
  - <img src="url" alt="alternate text">

  1. Image Maps
    - <map>
    - Map tag defines an image map. An image map is an image with clickable areas. The areas are defined with one or more <area> tags.
    - How does it work?
      |- You should be able to perform different actions depending on where in the image you click.
      |- To create an image map you need an image, and some HTML code that describes the clickable areas.

    - Example:

      <img src="workplace.jpg" alt="Workplace" usemap="#workmap">

      <map name="workmap">
        <area shape="rect" coords="34,44,270,350" alt="Computer" href="computer.htm">
        <area shape="rect" coords="290,172,333,250" alt="Phone" href="phone.htm">
        <area shape="circle" coords="337,300,44" alt="Coffee" href="coffee.htm">
      </map>

    - usemap Attribute
      |- The usemap valute start with a # hashtag followed by the name of the image map, and is used to create a relationship between the image and the image map.

    - https://www.w3schools.com/html/html_images_imagemap.asp

  2. Background Image
    - use style attribute and the CSS background-image property
    - <p style="background-image: url('img_girl.jpg');">
    - Background Image on a Page:
      |- put it in the body tag in CSS file

    - Background Repeat:
      |- background-repeat: no-repeat;

    - Background Cover:
      |- If you want background image to cover the entire element.
      |- background-size:cover;
      |- To make sure the entire element is always covered
        --> background-attachment: fixed;

    - Background Stretch:
      |- make background image stretcht to fit the entire element.
      |- background-size: 100% 100%;

  3. <picture>
    - picture element allows you to display different pictures for different devices or screen sizes.
    - gices more flexiblility in specifying image resources.
    - picture element contains one or more <source> elements
      |- each referring to different iages through the "srcset" attribute. This way the browser can choose the image that best fits the current view and/or device.
    - Each <source> element has a "media" attribute that defines when the image is the most suitable.

    - 2 main purposes for the <picture> element:
      A. Bandwidth
        |- If you have a small screen or device, it is not necessary to load a large image file. The browser will use the first <source> element with matching with matching attribute values, and ignore any of the following elements.
      B. Format Support
        |- Some browsers or devices may not support all image formats. By using the <picture> element, you can add images of all formats, and the browser will use the first format it recognizes, and ignore any of the following elements.

    - Example:

      <picture>
        <source srcset="img_avatar.png">
        <source srcset="img_girl.jpg">
        <img src="img_beatles.gif" alt="Beatles" style="width:auto;">
      </picture>

  #Favicon
    - Small image displayed next to the page title in the browser tab.
    - To add a favicon to your website
      |- either save your favicon image to the root directory of your webserver
      |- or create a folder in the root directory called images, and save your favicon image in this folder. "favicon.ico"
    - Next add a <link> element tot your "index.html" file, after the <title> element.

  # Table
    - allow dev to arrange data into rows and columns
    - table > tr > th
    - table > tr > td

  # Lists
    - Order list -- <ol> --> numbered list
    - Unorder List -- <ul> --> bullet list
    - nside of each list have -- <li> --> list items

  # Block and Inline Elements
    - Block-level Elements
      |- start on a new line, the browser automatically add some space (margin) before and after the element.
      |- always take u the full width available. (stretches out to the left and right as far as it can)
      |- <p>, <div>, <article>, <aside>, <blockquote>, <dd>, <figure>, <footer>, <form>, <h1> - <h6>, <header>, <main>, <nav>, <section>, <ol>, <ul>.

    - Inline-level Elements
      |- not start on a new line
      |- take up as much width as necessary.
      |- <span>, <button>, <img>, <input>, <label>, <map>, <span>, <select>, <textarea>.

    - <div>
      |- used as container for other HTML elements.
      |- has no required attributes, but style, class, id.
    - <span>
      |- an inline container used to mark up a part of a text, or a part of a document.
      |- has no required attributes, but style, class, id.

  # Class
    - often used to point to a class name in a style sheet.
    - used by a JavaScript to access and manipulate elements with the specific class name
    - case sensitive
    - different elements can share same class
    - HTML class attribute specifies one or more class name for an element
    - Classes are used by CSS and JavaScript to select and access specific elements
    - The class attribute can be used on any HTML element.
    - JavaScript can access elements with specific class with the
      + getElementsByClassName() method.

  # ID
    - Used to specify a unique id for an HTML element
    - The value of the id attribute must be unique within the HTML document
    - The id attribute used by CSS and JavaScript to style/select a specific element
    - The value of the id attribute is case secitive
    - the id attribute is also used to create HTML bookmarks
    - JavaScript can access an element with a specific id with the getElementById() method

  # iFrame
    - display a web page within a webpage
    - <iframe src="" title=""></iframe>

    - The HTML <iframe> tag specifes an inline frame
    - The src attribute defines the URL of the page to embed
    - Always include the title attribute (for screen readers)
    - The height and width attributes specifes the size of the iframe
    - Use border:none; to remove the border around the iframe

  # JavaScript
    - make HTML pages more dynamic and interactive.
    - <script> --> defines a client-side script
    - <noscript> --> defines an alternate content for users that do not support client-side scripts

  # File Path
    - describes the location of a file in a web site's folder structure.
    - File paths are used when linking to external files: webpages, images, styles sheets, javascript

    1. Relative File Path
      |- points to a file relative to the current page. Located at the root of the current web
        + src="/images/picture.jpg"

    2. Absolute File Path
      |- the full URL to the file
        + src="https://www.w3schools.com/images/picture.jpg"

    3. Best Practice
      |- Use relative file paths
      |- When using relative file paths, your web pages will not bebound to your current base URL. All links will work on your own computer (localhost)
      as well as on your current public domain and your structure public domains.

  # Meta Element
    - <meta>
    - used to specify the character set, page description, keywords, author of the document, and viewport settings.
    - The metadata will not be displayed on the page, but are used by browsers (how to display content or reload page), by search engines (keywords), and other webservices.

  # Head Element
    - <head> --> container for metadata <data about data>
    - <head> --> placed between the <html> tag and the <body> tag
    - <title> --> required and it defines the title of the document
    - <style> --> used to define style information for the single document
    - <link> --> used to link to external style sheets
    - <meta> --> specify the character set, page description, keywords, author of the document, and viewport settings.
    - <script> --> used to define client-side JavaScript
    - <base> --> specifes the base URL and/or target for all relative URLs in a page

  # Layout Elements and Techniques
    - <header> --> defines a header for a document or a section
    - <nav> --> defines a set of navigation links
    - <section> --> defines a section in a document
    - <article> --> defines an independent, self-contained content
    - <aside> --> defines content aside from the content (like a sidebar)
    - <footer> --> defines a footer for a document or a section
    - <details> --> defines additional details that the user can open and close on demand
    - <summary> --> defines a heading for <details> element

  # Sematic Element
    - Elements with a meaning
    - article, aside, details, figcaption, figure, footer, header, main, mark, nav, section, summary, time.

    - article
      + defines independent, self-contained content
    - aside
      + defines content aside from the page content
    - details
      + defines additional details that the user can view or hide
    - figcaption
      + defines a caption for a <figure> element
    - figure
      + specifies self-contained content, like illustrations, diagrams, photos, code listings, etc...
    - footer
      + defines a footer for a document or section
    - header
      + specifies a header for a document or section
    - main
      + specifies the main content of a document
    - mark
      + defines marked/highlighted text
    - nav
      + defines navigation links
    - section
      + defines a section in a document
    - summary
      + defines a visible heading for a <details> element
    - time
      + defines a date/time











